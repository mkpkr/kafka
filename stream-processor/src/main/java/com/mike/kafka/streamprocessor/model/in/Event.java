/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mike.kafka.streamprocessor.model.in;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6276741815472048191L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.mike.kafka.streamprocessor.model.in\",\"fields\":[{\"name\":\"Type\",\"type\":[\"null\",\"string\"]},{\"name\":\"Location\",\"type\":[\"null\",\"string\"]},{\"name\":\"Timestamp\",\"type\":[\"null\",\"long\"]},{\"name\":\"Data\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Event> ENCODER =
      new BinaryMessageEncoder<Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Event> DECODER =
      new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Event> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Event to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Event from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Event instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence Type;
   private java.lang.CharSequence Location;
   private java.lang.Long Timestamp;
   private java.lang.CharSequence Data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param Type The new value for Type
   * @param Location The new value for Location
   * @param Timestamp The new value for Timestamp
   * @param Data The new value for Data
   */
  public Event(java.lang.CharSequence Type, java.lang.CharSequence Location, java.lang.Long Timestamp, java.lang.CharSequence Data) {
    this.Type = Type;
    this.Location = Location;
    this.Timestamp = Timestamp;
    this.Data = Data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Type;
    case 1: return Location;
    case 2: return Timestamp;
    case 3: return Data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Type = (java.lang.CharSequence)value$; break;
    case 1: Location = (java.lang.CharSequence)value$; break;
    case 2: Timestamp = (java.lang.Long)value$; break;
    case 3: Data = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Type' field.
   * @return The value of the 'Type' field.
   */
  public java.lang.CharSequence getType() {
    return Type;
  }


  /**
   * Sets the value of the 'Type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Gets the value of the 'Location' field.
   * @return The value of the 'Location' field.
   */
  public java.lang.CharSequence getLocation() {
    return Location;
  }


  /**
   * Sets the value of the 'Location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.Location = value;
  }

  /**
   * Gets the value of the 'Timestamp' field.
   * @return The value of the 'Timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return Timestamp;
  }


  /**
   * Sets the value of the 'Timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.Timestamp = value;
  }

  /**
   * Gets the value of the 'Data' field.
   * @return The value of the 'Data' field.
   */
  public java.lang.CharSequence getData() {
    return Data;
  }


  /**
   * Sets the value of the 'Data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.CharSequence value) {
    this.Data = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static com.mike.kafka.streamprocessor.model.in.Event.Builder newBuilder() {
    return new com.mike.kafka.streamprocessor.model.in.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static com.mike.kafka.streamprocessor.model.in.Event.Builder newBuilder(com.mike.kafka.streamprocessor.model.in.Event.Builder other) {
    if (other == null) {
      return new com.mike.kafka.streamprocessor.model.in.Event.Builder();
    } else {
      return new com.mike.kafka.streamprocessor.model.in.Event.Builder(other);
    }
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static com.mike.kafka.streamprocessor.model.in.Event.Builder newBuilder(com.mike.kafka.streamprocessor.model.in.Event other) {
    if (other == null) {
      return new com.mike.kafka.streamprocessor.model.in.Event.Builder();
    } else {
      return new com.mike.kafka.streamprocessor.model.in.Event.Builder(other);
    }
  }

  /**
   * RecordBuilder for Event instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private java.lang.CharSequence Type;
    private java.lang.CharSequence Location;
    private java.lang.Long Timestamp;
    private java.lang.CharSequence Data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mike.kafka.streamprocessor.model.in.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Type)) {
        this.Type = data().deepCopy(fields()[0].schema(), other.Type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Location)) {
        this.Location = data().deepCopy(fields()[1].schema(), other.Location);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[2].schema(), other.Timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Data)) {
        this.Data = data().deepCopy(fields()[3].schema(), other.Data);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mike.kafka.streamprocessor.model.in.Event other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Type)) {
        this.Type = data().deepCopy(fields()[0].schema(), other.Type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Location)) {
        this.Location = data().deepCopy(fields()[1].schema(), other.Location);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[2].schema(), other.Timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Data)) {
        this.Data = data().deepCopy(fields()[3].schema(), other.Data);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return Type;
    }


    /**
      * Sets the value of the 'Type' field.
      * @param value The value of 'Type'.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Type' field has been set.
      * @return True if the 'Type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Type' field.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder clearType() {
      Type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Location' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return Location;
    }


    /**
      * Sets the value of the 'Location' field.
      * @param value The value of 'Location'.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Location = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Location' field has been set.
      * @return True if the 'Location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Location' field.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder clearLocation() {
      Location = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return Timestamp;
    }


    /**
      * Sets the value of the 'Timestamp' field.
      * @param value The value of 'Timestamp'.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[2], value);
      this.Timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Timestamp' field has been set.
      * @return True if the 'Timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Timestamp' field.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder clearTimestamp() {
      Timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Data' field.
      * @return The value.
      */
    public java.lang.CharSequence getData() {
      return Data;
    }


    /**
      * Sets the value of the 'Data' field.
      * @param value The value of 'Data'.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder setData(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Data' field has been set.
      * @return True if the 'Data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Data' field.
      * @return This builder.
      */
    public com.mike.kafka.streamprocessor.model.in.Event.Builder clearData() {
      Data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Event build() {
      try {
        Event record = new Event();
        record.Type = fieldSetFlags()[0] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Location = fieldSetFlags()[1] ? this.Location : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Timestamp = fieldSetFlags()[2] ? this.Timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.Data = fieldSetFlags()[3] ? this.Data : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Event>
    READER$ = (org.apache.avro.io.DatumReader<Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.Type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.Type);
    }

    if (this.Location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.Location);
    }

    if (this.Timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.Timestamp);
    }

    if (this.Data == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.Data);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.Type = null;
      } else {
        this.Type = in.readString(this.Type instanceof Utf8 ? (Utf8)this.Type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.Location = null;
      } else {
        this.Location = in.readString(this.Location instanceof Utf8 ? (Utf8)this.Location : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.Timestamp = null;
      } else {
        this.Timestamp = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.Data = null;
      } else {
        this.Data = in.readString(this.Data instanceof Utf8 ? (Utf8)this.Data : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Type = null;
          } else {
            this.Type = in.readString(this.Type instanceof Utf8 ? (Utf8)this.Type : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Location = null;
          } else {
            this.Location = in.readString(this.Location instanceof Utf8 ? (Utf8)this.Location : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Timestamp = null;
          } else {
            this.Timestamp = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.Data = null;
          } else {
            this.Data = in.readString(this.Data instanceof Utf8 ? (Utf8)this.Data : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










